/*
####################
Interrupt Example
Programmed on STM32L4 Discovery board.
Accompanying files with Address information can be found on the STM website
*/

void LCD_PIN_Init(void){
RCC->AHB2ENR|=RCC_AHB2ENR_GPIOAEN;
RCC->AHB2ENR|=RCC_AHB2ENR_GPIOBEN;
RCC->AHB2ENR|=RCC_AHB2ENR_GPIOCEN;
RCC->AHB2ENR|=RCC_AHB2ENR_GPIODEN;
RCC->AHB2ENR|=RCC_AHB2ENR_GPIOEEN;
//set up the systick
SysTick->CTRL=0;
SysTick->LOAD=400000;
NVIC_SetPriority(SysTick_IRQn,(1<<__NVIC_PRIO_BITS)-1);
SysTick->VAL=0;
SysTick->CTRL|=SysTick_CTRL_CLKSOURCE_Msk;
SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;
SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;
GPIOA->MODER |=0x802AA000;
GPIOA->MODER &=0xBFEAA000;
GPIOA->PUPDR |=0x8AA; //pull down for joysticks
GPIOB->MODER |=0xAA080A0A;
GPIOB->MODER &=0xAAFBFAFA;
GPIOC->MODER |=0x0002AA80;
GPIOC->MODER &=0xFFFEAABF;
GPIOD->MODER |=0xAAAA0000;
GPIOD->MODER &=0xAAAAFFFF;
GPIOE->MODER &=0xF55FFFFF;
GPIOE->OTYPER |=0x3c00;
//EXTI1 enable left joystick
RCC->APB2ENR|=RCC_APB2ENR_SYSCFGEN;
SYSCFG->EXTICR[0] &=~SYSCFG_EXTICR1_EXTI1;
SYSCFG->EXTICR[0] |=SYSCFG_EXTICR1_EXTI1_PA;
SYSCFG->EXTICR[0] &=~(0x000F);
EXTI->RTSR1 |=EXTI_RTSR1_RT1;
EXTI->FTSR1 &=EXTI_FTSR1_FT1;
EXTI->IMR1 |=EXTI_IMR1_IM1;
NVIC_SetPriority(EXTI1_IRQn,1);
NVIC_EnableIRQ(EXTI1_IRQn);
//EXTI0 center joystick
SYSCFG->EXTICR[0] &=~SYSCFG_EXTICR1_EXTI0;
SYSCFG->EXTICR[0] |=SYSCFG_EXTICR1_EX
SYSCFG->EXTICR[0] &=~(0x000F);
EXTI->RTSR1 |=EXTI_RTSR1_RT2;
EXTI->FTSR1 &=EXTI_FTSR1_FT2;
EXTI->IMR1 |=EXTI_IMR1_IM2;
NVIC_SetPriority(EXTI2_IRQn,3);
NVIC_EnableIRQ(EXTI2_IRQn);
}
//some constants for easiness
uint8_t seconds=0;
uint8_t minutes=0;
uint8_t tensec=0;
uint32_t joycenter =0x1;
uint32_t joyup=0x8;
uint32_t joyright=0x4;
uint32_t joydown=0x20;
uint32_t joyleft=0x2;
void EXTI1_IRQHandler(void){ //left joystick interrupt
if ((EXTI->PR1&EXTI_PR1_PIF1)==EXTI_PR1_PIF1){
tensec=0;//reset our values
minutes=0;
seconds=0;
while ((GPIOA->IDR&joyleft)==joyleft){
LCD_DisplayString(" 00000",7); //this resets our lcd immediately
}
EXTI->PR1 |=EXTI_PR1_PIF1; //reset
}
}
int start=0;
void EXTI2_IRQHandler(void){ //right joystick interrupt
if ((EXTI->PR1&EXTI_PR1_PIF2)==EXTI_PR1_PIF2){
start=1; //this starts the systick
EXTI->PR1 |=EXTI_PR1_PIF2;
}
}
void EXTI0_IRQHandler(void){ //center button interrupt
if ((EXTI->PR1&EXTI_PR1_PIF0)==EXTI_PR1_PIF0){ //check if it is pressed
while ((GPIOA->IDR&joycenter)==joycenter){ //debounce
}
while ((GPIOA->IDR&joyright)!=joyright){//wait until right joystick is pressed
to continue
}
EXTI->PR1 |=EXTI_PR1_PIF1;//reset
}
}
char time[6];//value to store our timer digits
void SysTick_Handler(void){
while(start==0){} //waits for left joystick to be pressed
displaytimer();//constantly display the timer and update it
}
void displaytimer(void){//displays the timer and iterates the timer
if (seconds==59 &&tensec==9){//important to have this before next else if
seconds =0;
tensec=0;
minutes++;
}
else if (tensec ==9){//helps to push into second when we get past bounds
seconds++;
tensec=0;
}
else{tensec++;}//iterrate tensec
//’0’ helps to get the value into the correct ascii value
time[5] =(tensec+'0');//get tenth of a second digit
time[4] =(seconds%10+'0');//get the least significant second digit
time[3]=((seconds/10)%10+'0');//get the most significant second digit
time[2]=(minutes%10+'0');//get the lower minute digit
time[1]=((minutes/10)%10+'0');//get the most signficant minute digit
LCD_DisplayString((uint8_t *)time,7); //display all the digits.
//LCD display code was provided by Book
}
